// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized suggestions on how to optimize spending and savings based on transaction history.
 *
 * - getSpendingSuggestions - A function that generates spending suggestions.
 * - SpendingSuggestionsInput - The input type for the getSpendingSuggestions function.
 * - SpendingSuggestionsOutput - The return type for the getSpendingSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingSuggestionsInputSchema = z.object({
  transactionHistory: z
    .string()
    .describe(
      'A string containing the transaction history of the user.  Each transaction should be on a new line.  Include the date, description, and amount for each transaction.'
    ),
  currentBudget: z.number().describe('The current budget of the user.'),
});
export type SpendingSuggestionsInput = z.infer<typeof SpendingSuggestionsInputSchema>;

const SpendingSuggestionsOutputSchema = z.object({
  suggestions: z
    .string()
    .describe(
      'A list of personalized suggestions on how to optimize spending and savings based on the transaction history.'
    ),
});
export type SpendingSuggestionsOutput = z.infer<typeof SpendingSuggestionsOutputSchema>;

export async function getSpendingSuggestions(input: SpendingSuggestionsInput): Promise<SpendingSuggestionsOutput> {
  return spendingSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'spendingSuggestionsPrompt',
  input: {schema: SpendingSuggestionsInputSchema},
  output: {schema: SpendingSuggestionsOutputSchema},
  prompt: `You are an AI financial assistant integrated within the "Budget Buddy" application. Your goal is to help users in India manage their finances better by providing actionable advice.

Analyze the user's transaction history and current budget, which are in Indian Rupees (INR), to provide personalized suggestions on how to optimize their spending and savings.

**Formatting Instructions:**
- Provide the response as a numbered list in Markdown format.
- Each item in the list must start with a number (e.g., \`1.\`), followed by a bolded heading (e.g., \`**Food Expenses:**\`).
- After the heading, provide a concise, actionable suggestion.
- **Crucially, do not recommend any other budgeting apps or financial tools. The user is already using Budget Buddy.** Instead, encourage them to use Budget Buddy's features (like category tracking or setting savings goals) where relevant.
- Do not add any introductory or concluding text. Your entire response should be the numbered list itself.
- Do not wrap the output in a JSON object or any other format.

Transaction History:
{{transactionHistory}}

Current Budget: â‚¹{{currentBudget}}

Begin your response directly with the first numbered item.`,
});

const spendingSuggestionsFlow = ai.defineFlow(
  {
    name: 'spendingSuggestionsFlow',
    inputSchema: SpendingSuggestionsInputSchema,
    outputSchema: SpendingSuggestionsOutputSchema,
  },
  async (input) => {
    const maxRetries = 3;
    let attempt = 0;
    while (attempt < maxRetries) {
      try {
        const {output} = await prompt(input);
        return output!;
      } catch (error: any) {
        attempt++;
        const isLastAttempt = attempt >= maxRetries;
        const isOverloaded = error.message && (error.message.includes('503') || error.message.includes('overloaded'));
        
        if (isOverloaded && !isLastAttempt) {
          const delay = Math.pow(2, attempt) * 1000;
          console.log(`Attempt ${attempt} failed with model overload. Retrying in ${delay / 1000}s...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        } else {
          throw error;
        }
      }
    }
    throw new Error('Failed to get spending suggestions after multiple retries.');
  }
);
