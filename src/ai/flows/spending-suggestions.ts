// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized suggestions on how to optimize spending and savings based on transaction history.
 *
 * - getSpendingSuggestions - A function that generates spending suggestions.
 * - SpendingSuggestionsInput - The input type for the getSpendingSuggestions function.
 * - SpendingSuggestionsOutput - The return type for the getSpendingSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingSuggestionsInputSchema = z.object({
  transactionHistory: z
    .string()
    .describe(
      'A string containing the transaction history of the user.  Each transaction should be on a new line.  Include the date, description, and amount for each transaction.'
    ),
  currentBudget: z.number().describe('The current budget of the user.'),
});
export type SpendingSuggestionsInput = z.infer<typeof SpendingSuggestionsInputSchema>;

const SpendingSuggestionsOutputSchema = z.object({
  suggestions: z
    .string()
    .describe(
      'A list of personalized suggestions on how to optimize spending and savings based on the transaction history.'
    ),
});
export type SpendingSuggestionsOutput = z.infer<typeof SpendingSuggestionsOutputSchema>;

export async function getSpendingSuggestions(input: SpendingSuggestionsInput): Promise<SpendingSuggestionsOutput> {
  return spendingSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'spendingSuggestionsPrompt',
  input: {schema: SpendingSuggestionsInputSchema},
  output: {schema: SpendingSuggestionsOutputSchema},
  prompt: `You are a personal finance advisor for users in India. Analyze the user's transaction history and current budget, which are in Indian Rupees (INR), to provide personalized suggestions on how to optimize their spending and savings.

Transaction History:
{{transactionHistory}}

Current Budget: â‚¹{{currentBudget}}

Provide clear and actionable suggestions relevant to the Indian context.`,
});

const spendingSuggestionsFlow = ai.defineFlow(
  {
    name: 'spendingSuggestionsFlow',
    inputSchema: SpendingSuggestionsInputSchema,
    outputSchema: SpendingSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
